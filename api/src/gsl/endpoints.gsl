.template 1
.createJavaClass("../../generated-src", "$(package).endpoint", "$(Name)Resource")
package $(package).endpoint;

import java.util.List;
import javax.inject.Inject;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.MediaType;

import com.google.gson.Gson;
import com.google.gson.JsonParser;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.googlecode.objectify.Key;
import com.googlecode.objectify.Objectify;

import $(.package).entity.*;

@Path("$(.emberName :no)")
public class $(Name)Resource {
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Response getAll() {
		JsonArray out = new JsonArray();
		List<$(Name)> objects = mData.load().type($(Name).class).list();
		for ($(Name) object : objects) {
			out.add(serialize(object));
		}

		return wrap(out);
	}

	@GET @Path("{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response get(@PathParam("id") int id) {
		$(Name) object = mData.load().type($(Name).class).first().now();
		if (object == null)
			return Response.status(Response.Status.NOT_FOUND).build();
		return wrap(serialize(object));
	}

	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Response create(String jdata) {
		JsonObject data = unwrap(jdata);
		$(Name) object = new $(Name)();

.for property
.   if defined(id)

.   endif
.   if isBaseType(type)
		data.add("$(emberize(Name))", BaseTypes.serialize(object.get$(Name)()));
.   else
		data.add("$(emberize(Name))", null);
.   endif
.endfor
	}

	protected JsonObject serialize($(Name) object) {
		JsonObject out = new JsonObject();
.for property
.   if isBaseType(type)
		out.add("$(emberize(Name))", BaseTypes.serialize(object.get$(Name)()));
.   else
		out.add("$(emberize(Name))", null);
.   endif
.endfor
		return out;
	}

	private Response wrap(JsonElement data) {
		JsonObject wrapper = new JsonObject();
		wrapper.add("$(emberName :no)", data);
		return Response.ok().entity(mGson.toJson(wrapper)).build();
	}

	private JsonObject unwrap(String data) {
		JsonElement e = new JsonParser().parse(data);
		return e.getAsJsonObject().getAsJsonObject("$(emberName :no)");
	}

	@Inject
	private Objectify mData;
	private Gson mGson = new Gson();
}
.endtemplate
